// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// mongodb+srv://shaqrapp:@cluster0.sofo3oi.mongodb.net/shaqrapp?retryWrites=true&w=majority&appName=Cluster0

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  // premium       Boolean   @default(false)
  role          String    @default("user")
  banned        Boolean   @default(false)
  banReason     String?
  banExpires    Int? /// Unix timestamp for ban expiration
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]

  Invite Invite[]

  AdvancedInvite AdvancedInvite[]
}

model Session {
  id             String   @id @default(cuid()) @map("_id")
  userId         String
  token          String
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id @default(cuid()) @map("_id")
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  idToken               String? // Add this field
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Template {
  id             String   @id @default(cuid()) @map("_id") // Unique identifier
  color          String // Gradient color or theme
  imageCorner    String? // Optional image for the corner
  cornerRitarion Boolean? // Optional boolean for corner rotation
  image          String? // Optional main image
  occasions      String[] // Array of occasions
  tags           String[] // Array of tags (e.g., 'timer', 'middleText', etc.)
  translations   Json // JSON object for translations (kk, ru, en)
  createdAt      DateTime @default(now()) // Timestamp for creation
  updatedAt      DateTime @updatedAt // Timestamp for last update

  Invite Invite[]
}

model Invite {
  id         String   @id @default(cuid()) @map("_id") // Unique identifier
  title      String // Title of the invite
  date       DateTime // Date and time of the event
  location   String // Location of the event
  message    String? // Optional message for the invite
  userId     String // Relation to the User model
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId String // Relation to the Template model
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  expiresAt  DateTime // Expiration date and time for the invite
  createdAt  DateTime @default(now()) // Timestamp for creation
  updatedAt  DateTime @updatedAt // Timestamp for last update
}

model AdvancedInviteTemplate {
  id           String   @id @default(cuid()) @map("_id")
  path         String // Path for the template
  translations Json // JSON object for translations (kk, ru, en)
  inputs       String[] // Array of input fields (e.g., 'name', 'age', 'dateTime', etc.)
  createdAt    DateTime @default(now()) // Timestamp for creation
  updatedAt    DateTime @updatedAt // Timestamp for last update

  AdvancedInvite AdvancedInvite[]
}

model AdvancedInvite {
  id                     String                 @id @default(cuid()) @map("_id") // Unique identifier
  name                   String // Title of the invite
  age                    String // Age of the person being invited
  dateTime               DateTime // Date and time of the event
  location               String // Location of the event and links to map apps
  address                String // Optional address for the event
  addressLink            String[] // Optional links to map apps
  themeOrMessage         String? // Optional theme or message for the invite
  dressCode              String? // Optional dress code information
  giftInfo               String? // Optional gift information
  rsvpDeadline           DateTime? // Optional RSVP deadline
  contactInfo            String? // Optional contact information
  path                   String // Path for the template
  rsvpTrack              Json[]
  userId                 String // Relation to the User model
  user                   User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId             String // Relation to the Template model
  AdvancedInviteTemplate AdvancedInviteTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  expiresAt              DateTime // Expiration date and time for the invite
  createdAt              DateTime               @default(now()) // Timestamp for creation
  updatedAt              DateTime               @updatedAt // Timestamp for last update
}
